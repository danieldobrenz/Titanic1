{
  
    
        "post0": {
            "title": "Title",
            "content": "Importing the Relevant Libraries . import pandas as pd #linear algebra import numpy as np #data visualization import seaborn as sns import matplotlib.pyplot as plt #regular expressions import re . Getting the Data . test_df = pd.read_csv(&#39;test.csv&#39;) train_df = pd.read_csv(&#39;train.csv&#39;) . train_df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . train_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . This training set has 891 examples and has 11 columns plus the target variable. 5 are integers, 5 are objects, 2 are floats. . train_df.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . We can see that 38% of the training set passengers &#39;Survived&#39; the sinking. The age ranges go from 0.4 to 80 years of age. Each passenger has a unique ID attached to them. There are 3 classes of passengers. The range of siblings/spouses with any single passenger is 0 to 8. The majority of passengers were in 3rd class and the least amount were in 1st class. The average number of parents and children were 1. So very little families were aboard the ship. The average fare was &#39;32&#39; and the maximum was &#39;512&#39;. Also, we can note that the &#39;Age&#39; column has some missing values because the count is 714 when it should be 891. We will have to fill in those missing values. . train_df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . There are alot of string values in these columns that are going to have to be converted into numerical values in order for the model to work. Also, the range of values are different from one another therefore standardizing the dataset will be necessary. . total = train_df.isnull().sum().sort_values(ascending=False) percent_1 = train_df.isnull().sum()/train_df.isnull().count()*100 percent_2 = (round(percent_1, 1)).sort_values(ascending=False) missing_data = pd.concat([total, percent_2], axis=1, keys=[&#39;Total&#39;, &#39;%&#39;]) missing_data.head(5) . Total % . Cabin 687 | 77.1 | . Age 177 | 19.9 | . Embarked 2 | 0.2 | . Fare 0 | 0.0 | . Ticket 0 | 0.0 | . Here, we need to see what data is actually missing. &#39;Embarked&#39; has only 2 missing values, therefore filling those in will be easy. &#39;Cabin&#39; has 77.1% missing from the column, which is alot. So, we might have to remove that altogether. &#39;Age&#39; will be tough to deal with as well. . train_df.columns.values . array([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=object) . Looking at the 11 features. What features would contribute to the high survival rate? &#39;PassengerID&#39;, &#39;Name&#39;, &#39;Ticket&#39; don&#39;t add any predictive value. . Heatmap . plt.figure(figsize=(10,8)) sns.heatmap(train_df.corr(), annot=True, cmap=&#39;RdBu&#39;, center=0, linewidths=1); . We are going to look at how the features compare to the &#39;Survival&#39; target. The &#39;Passenger ID&#39; has to the lowest correlation at -0.005. That pretty much zero correlation. So we can eliminate that feature. Normally you would look for the variables that are the closest to 1 in a correlation heatmap, but remember, the target variables are 0 OR 1 so we want to just look at what is farther from 0. The &#39;Pclass&#39; variable has the coefficient of -0.34, which makes sense. I would assume that the first class passengers would have a higher chance of survival. &#39;Age&#39; and &#39;SibSp&#39; features are further away from zero. The two biggest correlations are the &#39;Parch&#39; and the &#39;Fare&#39; features, which have 0.082 and 0.26. . Histogram . Next we are going to create a histogram comparing the rates of survival of males and females in regards the their ages. . survived = &#39;survived&#39; not_survived = &#39;not survived&#39; fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(15, 8)) women = train_df[train_df[&#39;Sex&#39;]==&#39;female&#39;] men = train_df[train_df[&#39;Sex&#39;]==&#39;male&#39;] ax = sns.histplot(women[women[&#39;Survived&#39;]==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False) ax = sns.histplot(women[women[&#39;Survived&#39;]==0].Age.dropna(), bins=18, label = not_survived, ax = axes[0], kde =False, color=&#39;skyblue&#39;) ax.legend() ax.set_title(&#39;Female&#39;) ax = sns.histplot(men[men[&#39;Survived&#39;]==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False) ax = sns.histplot(men[men[&#39;Survived&#39;]==0].Age.dropna(), bins=18, label = not_survived, ax = axes[1], kde = False, color=&#39;skyblue&#39;) ax.legend() _ = ax.set_title(&#39;Male&#39;) . Men have a chance of survival if they were from the ages 18-50, but overall there survival rate was extremely low. Women in comparison had a high survival rate overall. The highest range of survival by men were on the 0-5 years of age range. Which makes sense. They saved the babies first. . Embarked . FacetGrid = sns.FacetGrid(train_df, row=&#39;Embarked&#39;, height=4.5, aspect=1.6) FacetGrid.map(sns.pointplot,&#39;Pclass&#39;,&#39;Survived&#39;, &#39;Sex&#39;, palette=None, order=None, hue_order=None ) FacetGrid.add_legend(); . Looking at the pointplot we can see that the port of Embarkation plays a role in the survival rate. Particularly for the women. If you were a women who embarked from Queensland and Southhampton your survival rate was higher. If you were a male that embarked from Cherbourg you had a chance at survival. . Passenger Class . sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, data=train_df); . Here we can see that the 1st class passengers had the highest rate of survival. While the 3rd class passengers had a low chance. . Siblings/Spouse and Parent/Child . SibSp and Parch would make more sense as a combined feature, that shows the total number of relatives, a person has on the Titanic. I will create it below and also a feature that shows if someone is not alone. . data = [train_df, test_df] for dataset in data: dataset[&#39;Relatives&#39;] = dataset[&#39;SibSp&#39;] + dataset[&#39;Parch&#39;] dataset.loc[dataset[&#39;Relatives&#39;] &gt; 0, &#39;Not_Alone&#39;] = 0 dataset.loc[dataset[&#39;Relatives&#39;] == 0, &#39;Not_Alone&#39;] = 1 dataset[&#39;Not_Alone&#39;] = dataset[&#39;Not_Alone&#39;].astype(int) train_df[&#39;Not_Alone&#39;].value_counts() . 1 537 0 354 Name: Not_Alone, dtype: int64 . axes = sns.catplot(x=&#39;Relatives&#39;, y=&#39;Survived&#39;, data=train_df, aspect=2.5, kind=&#39;point&#39; ) . Here we can see that you had a high probabilty of survival with 1 to 3 relatives, but a lower one if you had less than 1 or more than 3 (except for some cases with 6 relatives). 4 to 5 and 7 to 8 siblings gave you a lower chance of survival. . Data Preprocessing . #likely to survive train_df = train_df.drop([&#39;PassengerId&#39;], axis=1) . Missing Data . Age . Use the interpolate method to generate the missing values in the Age column . train_df[&#39;Age&#39;] = train_df[&#39;Age&#39;].interpolate() train_df[&#39;Age&#39;] = train_df[&#39;Age&#39;].astype(int) train_df[&#39;Age&#39;].isnull().isnull().sum() . 0 . test_df[&#39;Age&#39;] = test_df[&#39;Age&#39;].interpolate() test_df[&#39;Age&#39;] = test_df[&#39;Age&#39;].astype(int) test_df[&#39;Age&#39;].isnull().isnull().sum() . 0 . Cabin . The &#39;Cabin&#39; feature has the greatest number of missing values. So we will look at it here. . train_df[&#39;Cabin&#39;].unique() . array([nan, &#39;C85&#39;, &#39;C123&#39;, &#39;E46&#39;, &#39;G6&#39;, &#39;C103&#39;, &#39;D56&#39;, &#39;A6&#39;, &#39;C23 C25 C27&#39;, &#39;B78&#39;, &#39;D33&#39;, &#39;B30&#39;, &#39;C52&#39;, &#39;B28&#39;, &#39;C83&#39;, &#39;F33&#39;, &#39;F G73&#39;, &#39;E31&#39;, &#39;A5&#39;, &#39;D10 D12&#39;, &#39;D26&#39;, &#39;C110&#39;, &#39;B58 B60&#39;, &#39;E101&#39;, &#39;F E69&#39;, &#39;D47&#39;, &#39;B86&#39;, &#39;F2&#39;, &#39;C2&#39;, &#39;E33&#39;, &#39;B19&#39;, &#39;A7&#39;, &#39;C49&#39;, &#39;F4&#39;, &#39;A32&#39;, &#39;B4&#39;, &#39;B80&#39;, &#39;A31&#39;, &#39;D36&#39;, &#39;D15&#39;, &#39;C93&#39;, &#39;C78&#39;, &#39;D35&#39;, &#39;C87&#39;, &#39;B77&#39;, &#39;E67&#39;, &#39;B94&#39;, &#39;C125&#39;, &#39;C99&#39;, &#39;C118&#39;, &#39;D7&#39;, &#39;A19&#39;, &#39;B49&#39;, &#39;D&#39;, &#39;C22 C26&#39;, &#39;C106&#39;, &#39;C65&#39;, &#39;E36&#39;, &#39;C54&#39;, &#39;B57 B59 B63 B66&#39;, &#39;C7&#39;, &#39;E34&#39;, &#39;C32&#39;, &#39;B18&#39;, &#39;C124&#39;, &#39;C91&#39;, &#39;E40&#39;, &#39;T&#39;, &#39;C128&#39;, &#39;D37&#39;, &#39;B35&#39;, &#39;E50&#39;, &#39;C82&#39;, &#39;B96 B98&#39;, &#39;E10&#39;, &#39;E44&#39;, &#39;A34&#39;, &#39;C104&#39;, &#39;C111&#39;, &#39;C92&#39;, &#39;E38&#39;, &#39;D21&#39;, &#39;E12&#39;, &#39;E63&#39;, &#39;A14&#39;, &#39;B37&#39;, &#39;C30&#39;, &#39;D20&#39;, &#39;B79&#39;, &#39;E25&#39;, &#39;D46&#39;, &#39;B73&#39;, &#39;C95&#39;, &#39;B38&#39;, &#39;B39&#39;, &#39;B22&#39;, &#39;C86&#39;, &#39;C70&#39;, &#39;A16&#39;, &#39;C101&#39;, &#39;C68&#39;, &#39;A10&#39;, &#39;E68&#39;, &#39;B41&#39;, &#39;A20&#39;, &#39;D19&#39;, &#39;D50&#39;, &#39;D9&#39;, &#39;A23&#39;, &#39;B50&#39;, &#39;A26&#39;, &#39;D48&#39;, &#39;E58&#39;, &#39;C126&#39;, &#39;B71&#39;, &#39;B51 B53 B55&#39;, &#39;D49&#39;, &#39;B5&#39;, &#39;B20&#39;, &#39;F G63&#39;, &#39;C62 C64&#39;, &#39;E24&#39;, &#39;C90&#39;, &#39;C45&#39;, &#39;E8&#39;, &#39;B101&#39;, &#39;D45&#39;, &#39;C46&#39;, &#39;D30&#39;, &#39;E121&#39;, &#39;D11&#39;, &#39;E77&#39;, &#39;F38&#39;, &#39;B3&#39;, &#39;D6&#39;, &#39;B82 B84&#39;, &#39;D17&#39;, &#39;A36&#39;, &#39;B102&#39;, &#39;B69&#39;, &#39;E49&#39;, &#39;C47&#39;, &#39;D28&#39;, &#39;E17&#39;, &#39;A24&#39;, &#39;C50&#39;, &#39;B42&#39;, &#39;C148&#39;], dtype=object) . train_df[&#39;Cabin&#39;] = train_df[&#39;Cabin&#39;].fillna(value=&#39;U0&#39;) . decksLetter = train_df[&#39;Cabin&#39;].str.split(&#39;([A-Za-z]+)( d+)&#39;, expand=True) #isolate the letter column from the newly created columns decksLetter = decksLetter.loc[:,[1]] #create the one columnm with only letters decksLetter.rename(columns={1:&#39;Deck Letter&#39;}, inplace=False) train_df[&#39;Deck&#39;] = decksLetter #map the letter values to the number values which will corresphond to a &#39;deck&#39; number instead of a letter train_df[&#39;Deck&#39;] = train_df[&#39;Deck&#39;].map({&#39;A&#39;: 1, &#39;B&#39;: 2, &#39;C&#39;: 3, &#39;D&#39;: 4, &#39;E&#39;: 5, &#39;F&#39;: 6, &#39;G&#39;: 7, &#39;U&#39;: 8}) train_df[&#39;Deck&#39;].isnull().sum() . 4 . #here we will fill the nan values with a 9 train_df[&#39;Deck&#39;] = train_df[&#39;Deck&#39;].fillna(value=9) train_df[&#39;Deck&#39;] = train_df[&#39;Deck&#39;].astype(int) train_df[&#39;Deck&#39;].isnull().sum() . 0 . test_df[&#39;Cabin&#39;] = test_df[&#39;Cabin&#39;].fillna(value=&#39;U0&#39;) . decksLetter = test_df[&#39;Cabin&#39;].str.split(&#39;([A-Za-z]+)( d+)&#39;, expand=True) decksLetter = decksLetter.loc[:,[1]] decksLetter.rename(columns={1:&#39;Deck Letter&#39;}, inplace=False) test_df[&#39;Deck&#39;] = decksLetter test_df[&#39;Deck&#39;] = test_df[&#39;Deck&#39;].map({&#39;A&#39;: 1, &#39;B&#39;: 2, &#39;C&#39;: 3, &#39;D&#39;: 4, &#39;E&#39;: 5, &#39;F&#39;: 6, &#39;G&#39;: 7, &#39;U&#39;: 8}) . test_df[&#39;Deck&#39;].isnull().sum() . 2 . test_df[&#39;Deck&#39;] = test_df[&#39;Deck&#39;].fillna(value=9) test_df[&#39;Deck&#39;] = test_df[&#39;Deck&#39;].astype(int) test_df[&#39;Deck&#39;].isnull().sum() . 0 . train_df = train_df.drop([&#39;Cabin&#39;], axis=1) test_df = test_df.drop([&#39;Cabin&#39;], axis=1) . Sex . Here we are going to assign the &#39;male&#39; and &#39;female&#39; strings to&#39;0&#39; and &#39;1&#39; values . train_df[&#39;Sex&#39;] = train_df[&#39;Sex&#39;].map({&#39;male&#39;: 0, &#39;female&#39;: 1}) test_df[&#39;Sex&#39;] = test_df[&#39;Sex&#39;].map({&#39;male&#39;: 0, &#39;female&#39;: 1}) . Embarked . Here we assign the &#39;S&#39;, &#39;C&#39;, &#39;Q&#39; and &#39;nan&#39; to numerical values. C = Cherbourg, Q = Queenstown, S = Southampton. These are the ports that left with pasengers. . train_df[&#39;Embarked&#39;].unique() . array([&#39;S&#39;, &#39;C&#39;, &#39;Q&#39;, nan], dtype=object) . train_df[&#39;Embarked&#39;].isnull().sum() . 2 . train_df[&#39;Embarked&#39;] = train_df[&#39;Embarked&#39;].fillna(value=&#39;Z&#39;) . train_df[&#39;Embarked&#39;].unique() . array([&#39;S&#39;, &#39;C&#39;, &#39;Q&#39;, &#39;Z&#39;], dtype=object) . train_df[&#39;Embarked&#39;] = train_df[&#39;Embarked&#39;].map({&#39;S&#39;: 1, &#39;C&#39;: 2, &#39;Q&#39;: 3, &#39;Z&#39;: 4}) . test_df[&#39;Embarked&#39;].unique() . array([&#39;Q&#39;, &#39;S&#39;, &#39;C&#39;], dtype=object) . test_df[&#39;Embarked&#39;].isnull().sum() . 0 . test_df[&#39;Embarked&#39;] = test_df[&#39;Embarked&#39;].map({&#39;S&#39;: 1, &#39;C&#39;: 2, &#39;Q&#39;: 3}) . Fare . train_df[&#39;Fare&#39;] = train_df[&#39;Fare&#39;].astype(int) train_df[&#39;Fare&#39;].isnull().sum() . 0 . test_df[&#39;Fare&#39;].isnull().sum() . 1 . test_df[&#39;Fare&#39;].mean() . 35.6271884892086 . test_df[&#39;Fare&#39;] = test_df[&#39;Fare&#39;].fillna(36) test_df[&#39;Fare&#39;] = test_df[&#39;Fare&#39;].astype(int) test_df[&#39;Fare&#39;].isnull().sum() . 0 . Name . Thinking about the &#39;name&#39; column I thought, &#39;What if we separate it by the first letter of the last name. Maybe where someone&#39;s last name falls in the alphabet yields some predictive power . nameLetter = train_df[&#39;Name&#39;].str.split(&#39;([A-Za-z])&#39;, expand=True) nameLetter = nameLetter.loc[:,[1]] nameLetter.rename(columns={1:&#39;Name Letter&#39;}, inplace=True) nameLetter.value_counts() . Name Letter S 86 M 74 B 72 C 69 H 69 A 51 L 48 P 47 R 41 G 41 D 39 W 33 F 31 T 30 J 30 N 29 K 28 O 23 V 13 E 12 Y 7 I 6 d 4 Z 3 Q 2 v 2 U 1 dtype: int64 . train_df[&#39;Name Number&#39;] = nameLetter . train_df[&#39;Name Number&#39;] = train_df[&#39;Name Number&#39;].map({&#39;C&#39;:1,&#39;S&#39;:2,&#39;D&#39;:3,&#39;B&#39;:4,&#39;M&#39;:5,&#39;W&#39;:6,&#39;A&#39;:7,&#39;H&#39;:8,&#39;K&#39;:9, &#39;L&#39;:10,&#39;R&#39;:11,&#39;P&#39;:12,&#39;F&#39;:13,&#39;G&#39;:14,&#39;O&#39;:15,&#39;N&#39;:16,&#39;T&#39;:17, &#39;J&#39;:18,&#39;E&#39;:19,&#39;V&#39;:20,&#39;I&#39;:21,&#39;d&#39;:22,&#39;Z&#39;:23,&#39;v&#39;:24,&#39;Q&#39;:25, &#39;U&#39;:26, &#39;Y&#39;:27}) . train_df[&#39;Name Number&#39;].isnull().sum() . 0 . train_df = train_df.drop([&#39;Name&#39;], axis=1) . nameLetter = test_df[&#39;Name&#39;].str.split(&#39;([A-Za-z])&#39;, expand=True) nameLetter = nameLetter.loc[:,[1]] nameLetter.rename(columns={1:&#39;Name Letter&#39;}, inplace=True) nameLetter.value_counts() . Name Letter C 42 S 39 D 33 B 31 M 30 W 28 A 24 H 23 K 21 L 20 R 19 P 19 F 16 G 13 O 11 N 10 T 10 J 9 E 5 V 4 I 3 d 3 Z 2 v 2 Q 1 dtype: int64 . test_df[&#39;Name Number&#39;] = nameLetter test_df[&#39;Name Number&#39;] = test_df[&#39;Name Number&#39;].map({&#39;C&#39;:1,&#39;S&#39;:2,&#39;D&#39;:3,&#39;B&#39;:4,&#39;M&#39;:5,&#39;W&#39;:6,&#39;A&#39;:7,&#39;H&#39;:8,&#39;K&#39;:9, &#39;L&#39;:10,&#39;R&#39;:11,&#39;P&#39;:12,&#39;F&#39;:13,&#39;G&#39;:14,&#39;O&#39;:15,&#39;N&#39;:16,&#39;T&#39;:17, &#39;J&#39;:18,&#39;E&#39;:19,&#39;V&#39;:20,&#39;I&#39;:21,&#39;d&#39;:22,&#39;Z&#39;:23,&#39;v&#39;:24,&#39;Q&#39;:25, &#39;U&#39;:26, &#39;Y&#39;:27}) test_df[&#39;Name Number&#39;].isnull().sum() . 0 . test_df = test_df.drop([&#39;Name&#39;], axis=1) . Ticket . train_df = train_df.drop([&#39;Ticket&#39;], axis=1) test_df = test_df.drop([&#39;Ticket&#39;],axis=1) . test_df = test_df.drop([&#39;PassengerId&#39;], axis=1) . Export the Dataframe for the Machine Learning Models . train_df.to_csv(&#39;train_pre.csv&#39;) test_df.to_csv(&#39;test_pre.csv&#39;) .",
            "url": "https://danieldobrenz.github.io/Titanic1/2021/11/14/Titanic.html",
            "relUrl": "/2021/11/14/Titanic.html",
            "date": " • Nov 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://danieldobrenz.github.io/Titanic1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://danieldobrenz.github.io/Titanic1/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://danieldobrenz.github.io/Titanic1/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://danieldobrenz.github.io/Titanic1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}